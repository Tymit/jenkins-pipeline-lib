module.exports = {
  dryRun: false,
  logLevel: "debug",
  printConfig: true,
  platform: "bitbucket",
  timezone: "Europe/Madrid",
  username: "tymitjenkins",
  password: "${BITBUCKET_PASSWORD}",
  labels: ["renovate"],
  npm: {
    postUpdateOptions: ["npmDedupe", "yarnDedupeFewer"],
  },
  repositories: [
    "gangsplit/agent-actions-service",
    "gangsplit/alfred-be",
    "gangsplit/alfred-fe",
    "gangsplit/authorizationx",
    "gangsplit/cancerbero",
    "gangsplit/central-logger",
    "gangsplit/comms-service",
    "gangsplit/customer-acquisition-service",
    "gangsplit/customer-fee-service",
    "gangsplit/customer-service",
    "gangsplit/datalayer",
    "gangsplit/debitx",
    "gangsplit/dylan-app-service",
    "gangsplit/dylan-external-api-service",
    "gangsplit/dylan-service",
    "gangsplit/dylan-web-service",
    "gangsplit/email-sender",
    "gangsplit/experian-webhook",
    "gangsplit/external-api-authentication-service",
    "gangsplit/faros",
    "gangsplit/faros-android",
    "gangsplit/faros-web-library",
    "gangsplit/farosui",
    "gangsplit/financial-data-service",
    "gangsplit/lambda-reporting",
    "gangsplit/notification-rules-service",
    "gangsplit/notifications-sns",
    "gangsplit/notifier-lambda",
    "gangsplit/onboarding-V2_1-service",
    "gangsplit/onboarding-marketing-automation-tool",
    "gangsplit/payment-gateway",
    "gangsplit/person-controls-service",
    "gangsplit/personal-data-service",
    "gangsplit/project-wormhole",
    "gangsplit/reporting-service",
    "gangsplit/spacex",
    "gangsplit/split-admin",
    "gangsplit/split-back",
    "gangsplit/split-iOS",
    "gangsplit/strapi-cms",
    "gangsplit/tpl-settlement-payment",
    "gangsplit/truelayer-webhook",
    "gangsplit/tymit-android-kotlin",
    "gangsplit/user-stats-service",
  ],
  gitUrl: "ssh",
  repositoryCache: "enabled",
  onboarding: false,
  onboardingConfig: {
    extends: [
      "config:base",
      ":automergeDisabled",
      ":disableDependencyDashboard",
      ":rebaseStalePrs",
      "docker:enableMajor",
      "group:recommended",
      "group:monorepos",
    ],
  },
  persistRepoData: true,
  requireConfig: false,
  baseBranches: ["develop", "development"],
  rebaseWhen: "behind-base-branch",
  schedule: [
    "after 10pm every weekday",
    "before 5am every weekday",
    "every weekend",
  ],
  prCreation: "not-pending",
  prHourlyLimit: "2",
  prConcurrentLimit: "20",
  bbUseDefaultReviewers: true,
  reviewersFromCodeOwners: true,
  regexManagers: [
    {
      fileMatch: ["(^|/)Dockerfile$"],
      matchStrings: [
        '#\\s*renovate:\\s*datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?\\s(ENV|ARG) .*?_VERSION="?(?<currentValue>.*?)"?\\s',
      ],
      versioningTemplate:
        "{{#if versioning}}{{versioning}}{{else}}semver{{/if}}",
    },
  ],
  packageRules: [
    {
      "matchPackageNames": ["postgres", "rabbitmq"],
      "enabled": false
    },
    {
      matchManagers: ["dockerfile", "docker-compose"],
      matchUpdateTypes: ["minor", "patch"],
      excludePackagePrefixes: ["postgres", "rabbitmq"],
    },
    {
      matchManagers: ["dockerfile", "docker-compose"],
      matchUpdateTypes: ["major"],
      excludePackagePrefixes: ["postgres", "rabbitmq"],
    },
    {
      groupName: "development minor upgrades",
      groupSlug: "dev-deps-minor",
      matchpackagePatterns: ["*"],
      matchUpdateTypes: ["minor", "patch"],
    },
    {
      groupName: "development major upgrades",
      groupSlug: "dev-deps-major",
      matchpackagePatterns: ["*"],
      matchUpdateTypes: ["major"],
    },
    {
      description: "Allow updates after 3 days (exclude renovate)",
      excludePackageNames: ["renovate/renovate"],
      separateMultipleMajor: true,
      separateMinorPatch: true,
      stabilityDays: 3,
    },
  ],
  //ignoreDeps: ["*"],
  updateInteralDeps: true,

};
